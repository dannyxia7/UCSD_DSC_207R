{"cells":[{"cell_type":"markdown","metadata":{"id":"hoNse2eKKxzr"},"source":["# Week 2 Study Notebook\n","\n","# UC San Diego OMDS DSC 207"]},{"cell_type":"markdown","source":["### Installing Otter-Grader\n","\n","In this course, we will be using Otter-Grader to evaluate your code using predefined test cases. Otter-Grader is a powerful tool that helps you check your work before submitting assignments. To get started with Otter-Grader, you need to install it in your environment.\n","\n","To install Otter-Grader, simply run the below code cell. In case, an error occurs related to wget command, please refer to the below link: https://www.jcchouinard.com/wget/. The tool may not be installed in your system."],"metadata":{"id":"aX5zJdhjYIph"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"H9n-Sa9IvAQP","executionInfo":{"status":"ok","timestamp":1728672562501,"user_tz":420,"elapsed":9830,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}},"outputId":"edf53044-e157-43d4-9a09-d3b1505d8142","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting otter-grader\n","  Downloading otter_grader-5.7.1-py3-none-any.whl.metadata (2.9 kB)\n","Collecting dill (from otter-grader)\n","  Downloading dill-0.3.9-py3-none-any.whl.metadata (10 kB)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from otter-grader) (3.1.4)\n","Requirement already satisfied: nbformat in /usr/local/lib/python3.10/dist-packages (from otter-grader) (5.10.4)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from otter-grader) (2.2.2)\n","Requirement already satisfied: PyYAML in /usr/local/lib/python3.10/dist-packages (from otter-grader) (6.0.2)\n","Collecting python-on-whales (from otter-grader)\n","  Downloading python_on_whales-0.73.0-py3-none-any.whl.metadata (18 kB)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from otter-grader) (2.32.3)\n","Requirement already satisfied: wrapt in /usr/local/lib/python3.10/dist-packages (from otter-grader) (1.16.0)\n","Collecting jupytext (from otter-grader)\n","  Downloading jupytext-1.16.4-py3-none-any.whl.metadata (13 kB)\n","Requirement already satisfied: click in /usr/local/lib/python3.10/dist-packages (from otter-grader) (8.1.7)\n","Collecting fica>=0.3.1 (from otter-grader)\n","  Downloading fica-0.4.1-py3-none-any.whl.metadata (2.0 kB)\n","Requirement already satisfied: ipython in /usr/local/lib/python3.10/dist-packages (from otter-grader) (7.34.0)\n","Requirement already satisfied: astunparse in /usr/local/lib/python3.10/dist-packages (from otter-grader) (1.6.3)\n","Requirement already satisfied: ipywidgets in /usr/local/lib/python3.10/dist-packages (from otter-grader) (7.7.1)\n","Collecting ipylab (from otter-grader)\n","  Downloading ipylab-1.0.0-py3-none-any.whl.metadata (6.7 kB)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from otter-grader) (71.0.4)\n","Requirement already satisfied: nbconvert in /usr/local/lib/python3.10/dist-packages (from otter-grader) (6.5.4)\n","Requirement already satisfied: docutils in /usr/local/lib/python3.10/dist-packages (from fica>=0.3.1->otter-grader) (0.18.1)\n","Requirement already satisfied: sphinx in /usr/local/lib/python3.10/dist-packages (from fica>=0.3.1->otter-grader) (5.0.2)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse->otter-grader) (0.44.0)\n","Requirement already satisfied: six<2.0,>=1.6.1 in /usr/local/lib/python3.10/dist-packages (from astunparse->otter-grader) (1.16.0)\n","Requirement already satisfied: ipykernel>=4.5.1 in /usr/local/lib/python3.10/dist-packages (from ipywidgets->otter-grader) (5.5.6)\n","Requirement already satisfied: ipython-genutils~=0.2.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets->otter-grader) (0.2.0)\n","Requirement already satisfied: traitlets>=4.3.1 in /usr/local/lib/python3.10/dist-packages (from ipywidgets->otter-grader) (5.7.1)\n","Requirement already satisfied: widgetsnbextension~=3.6.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets->otter-grader) (3.6.9)\n","Requirement already satisfied: jupyterlab-widgets>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets->otter-grader) (3.0.13)\n","Collecting jedi>=0.16 (from ipython->otter-grader)\n","  Using cached jedi-0.19.1-py2.py3-none-any.whl.metadata (22 kB)\n","Requirement already satisfied: decorator in /usr/local/lib/python3.10/dist-packages (from ipython->otter-grader) (4.4.2)\n","Requirement already satisfied: pickleshare in /usr/local/lib/python3.10/dist-packages (from ipython->otter-grader) (0.7.5)\n","Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from ipython->otter-grader) (3.0.48)\n","Requirement already satisfied: pygments in /usr/local/lib/python3.10/dist-packages (from ipython->otter-grader) (2.18.0)\n","Requirement already satisfied: backcall in /usr/local/lib/python3.10/dist-packages (from ipython->otter-grader) (0.2.0)\n","Requirement already satisfied: matplotlib-inline in /usr/local/lib/python3.10/dist-packages (from ipython->otter-grader) (0.1.7)\n","Requirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.10/dist-packages (from ipython->otter-grader) (4.9.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->otter-grader) (2.1.5)\n","Requirement already satisfied: markdown-it-py>=1.0 in /usr/local/lib/python3.10/dist-packages (from jupytext->otter-grader) (3.0.0)\n","Requirement already satisfied: mdit-py-plugins in /usr/local/lib/python3.10/dist-packages (from jupytext->otter-grader) (0.4.2)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from jupytext->otter-grader) (24.1)\n","Requirement already satisfied: tomli in /usr/local/lib/python3.10/dist-packages (from jupytext->otter-grader) (2.0.2)\n","Requirement already satisfied: lxml in /usr/local/lib/python3.10/dist-packages (from nbconvert->otter-grader) (4.9.4)\n","Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.10/dist-packages (from nbconvert->otter-grader) (4.12.3)\n","Requirement already satisfied: bleach in /usr/local/lib/python3.10/dist-packages (from nbconvert->otter-grader) (6.1.0)\n","Requirement already satisfied: defusedxml in /usr/local/lib/python3.10/dist-packages (from nbconvert->otter-grader) (0.7.1)\n","Requirement already satisfied: entrypoints>=0.2.2 in /usr/local/lib/python3.10/dist-packages (from nbconvert->otter-grader) (0.4)\n","Requirement already satisfied: jupyter-core>=4.7 in /usr/local/lib/python3.10/dist-packages (from nbconvert->otter-grader) (5.7.2)\n","Requirement already satisfied: jupyterlab-pygments in /usr/local/lib/python3.10/dist-packages (from nbconvert->otter-grader) (0.3.0)\n","Requirement already satisfied: mistune<2,>=0.8.1 in /usr/local/lib/python3.10/dist-packages (from nbconvert->otter-grader) (0.8.4)\n","Requirement already satisfied: nbclient>=0.5.0 in /usr/local/lib/python3.10/dist-packages (from nbconvert->otter-grader) (0.10.0)\n","Requirement already satisfied: pandocfilters>=1.4.1 in /usr/local/lib/python3.10/dist-packages (from nbconvert->otter-grader) (1.5.1)\n","Requirement already satisfied: tinycss2 in /usr/local/lib/python3.10/dist-packages (from nbconvert->otter-grader) (1.3.0)\n","Requirement already satisfied: fastjsonschema>=2.15 in /usr/local/lib/python3.10/dist-packages (from nbformat->otter-grader) (2.20.0)\n","Requirement already satisfied: jsonschema>=2.6 in /usr/local/lib/python3.10/dist-packages (from nbformat->otter-grader) (4.23.0)\n","Requirement already satisfied: numpy>=1.22.4 in /usr/local/lib/python3.10/dist-packages (from pandas->otter-grader) (1.26.4)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas->otter-grader) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->otter-grader) (2024.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas->otter-grader) (2024.2)\n","Requirement already satisfied: pydantic!=2.0.*,<3,>=2 in /usr/local/lib/python3.10/dist-packages (from python-on-whales->otter-grader) (2.9.2)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from python-on-whales->otter-grader) (4.66.5)\n","Requirement already satisfied: typer>=0.4.1 in /usr/local/lib/python3.10/dist-packages (from python-on-whales->otter-grader) (0.12.5)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from python-on-whales->otter-grader) (4.12.2)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->otter-grader) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->otter-grader) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->otter-grader) (2.2.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->otter-grader) (2024.8.30)\n","Requirement already satisfied: jupyter-client in /usr/local/lib/python3.10/dist-packages (from ipykernel>=4.5.1->ipywidgets->otter-grader) (6.1.12)\n","Requirement already satisfied: tornado>=4.2 in /usr/local/lib/python3.10/dist-packages (from ipykernel>=4.5.1->ipywidgets->otter-grader) (6.3.3)\n","Requirement already satisfied: parso<0.9.0,>=0.8.3 in /usr/local/lib/python3.10/dist-packages (from jedi>=0.16->ipython->otter-grader) (0.8.4)\n","Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat->otter-grader) (24.2.0)\n","Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat->otter-grader) (2023.12.1)\n","Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat->otter-grader) (0.35.1)\n","Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat->otter-grader) (0.20.0)\n","Requirement already satisfied: platformdirs>=2.5 in /usr/local/lib/python3.10/dist-packages (from jupyter-core>=4.7->nbconvert->otter-grader) (4.3.6)\n","Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=1.0->jupytext->otter-grader) (0.1.2)\n","Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.10/dist-packages (from pexpect>4.3->ipython->otter-grader) (0.7.0)\n","Requirement already satisfied: wcwidth in /usr/local/lib/python3.10/dist-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython->otter-grader) (0.2.13)\n","Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.10/dist-packages (from pydantic!=2.0.*,<3,>=2->python-on-whales->otter-grader) (0.7.0)\n","Requirement already satisfied: pydantic-core==2.23.4 in /usr/local/lib/python3.10/dist-packages (from pydantic!=2.0.*,<3,>=2->python-on-whales->otter-grader) (2.23.4)\n","Requirement already satisfied: shellingham>=1.3.0 in /usr/local/lib/python3.10/dist-packages (from typer>=0.4.1->python-on-whales->otter-grader) (1.5.4)\n","Requirement already satisfied: rich>=10.11.0 in /usr/local/lib/python3.10/dist-packages (from typer>=0.4.1->python-on-whales->otter-grader) (13.9.2)\n","Requirement already satisfied: notebook>=4.4.1 in /usr/local/lib/python3.10/dist-packages (from widgetsnbextension~=3.6.0->ipywidgets->otter-grader) (6.5.5)\n","Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.10/dist-packages (from beautifulsoup4->nbconvert->otter-grader) (2.6)\n","Requirement already satisfied: webencodings in /usr/local/lib/python3.10/dist-packages (from bleach->nbconvert->otter-grader) (0.5.1)\n","Requirement already satisfied: sphinxcontrib-applehelp in /usr/local/lib/python3.10/dist-packages (from sphinx->fica>=0.3.1->otter-grader) (2.0.0)\n","Requirement already satisfied: sphinxcontrib-devhelp in /usr/local/lib/python3.10/dist-packages (from sphinx->fica>=0.3.1->otter-grader) (2.0.0)\n","Requirement already satisfied: sphinxcontrib-jsmath in /usr/local/lib/python3.10/dist-packages (from sphinx->fica>=0.3.1->otter-grader) (1.0.1)\n","Requirement already satisfied: sphinxcontrib-htmlhelp>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from sphinx->fica>=0.3.1->otter-grader) (2.1.0)\n","Requirement already satisfied: sphinxcontrib-serializinghtml>=1.1.5 in /usr/local/lib/python3.10/dist-packages (from sphinx->fica>=0.3.1->otter-grader) (2.0.0)\n","Requirement already satisfied: sphinxcontrib-qthelp in /usr/local/lib/python3.10/dist-packages (from sphinx->fica>=0.3.1->otter-grader) (2.0.0)\n","Requirement already satisfied: snowballstemmer>=1.1 in /usr/local/lib/python3.10/dist-packages (from sphinx->fica>=0.3.1->otter-grader) (2.2.0)\n","Requirement already satisfied: babel>=1.3 in /usr/local/lib/python3.10/dist-packages (from sphinx->fica>=0.3.1->otter-grader) (2.16.0)\n","Requirement already satisfied: alabaster<0.8,>=0.7 in /usr/local/lib/python3.10/dist-packages (from sphinx->fica>=0.3.1->otter-grader) (0.7.16)\n","Requirement already satisfied: imagesize in /usr/local/lib/python3.10/dist-packages (from sphinx->fica>=0.3.1->otter-grader) (1.4.1)\n","Requirement already satisfied: pyzmq>=13 in /usr/local/lib/python3.10/dist-packages (from jupyter-client->ipykernel>=4.5.1->ipywidgets->otter-grader) (24.0.1)\n","Requirement already satisfied: argon2-cffi in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->otter-grader) (23.1.0)\n","Requirement already satisfied: nest-asyncio>=1.5 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->otter-grader) (1.6.0)\n","Requirement already satisfied: Send2Trash>=1.8.0 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->otter-grader) (1.8.3)\n","Requirement already satisfied: terminado>=0.8.3 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->otter-grader) (0.18.1)\n","Requirement already satisfied: prometheus-client in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->otter-grader) (0.21.0)\n","Requirement already satisfied: nbclassic>=0.4.7 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->otter-grader) (1.1.0)\n","Requirement already satisfied: notebook-shim>=0.2.3 in /usr/local/lib/python3.10/dist-packages (from nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->otter-grader) (0.2.4)\n","Requirement already satisfied: argon2-cffi-bindings in /usr/local/lib/python3.10/dist-packages (from argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->otter-grader) (21.2.0)\n","Requirement already satisfied: jupyter-server<3,>=1.8 in /usr/local/lib/python3.10/dist-packages (from notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->otter-grader) (1.24.0)\n","Requirement already satisfied: cffi>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->otter-grader) (1.17.1)\n","Requirement already satisfied: pycparser in /usr/local/lib/python3.10/dist-packages (from cffi>=1.0.1->argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->otter-grader) (2.22)\n","Requirement already satisfied: anyio<4,>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->otter-grader) (3.7.1)\n","Requirement already satisfied: websocket-client in /usr/local/lib/python3.10/dist-packages (from jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->otter-grader) (1.8.0)\n","Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.10/dist-packages (from anyio<4,>=3.1.0->jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->otter-grader) (1.3.1)\n","Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<4,>=3.1.0->jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->otter-grader) (1.2.2)\n","Downloading otter_grader-5.7.1-py3-none-any.whl (162 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m162.1/162.1 kB\u001b[0m \u001b[31m4.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading fica-0.4.1-py3-none-any.whl (13 kB)\n","Downloading dill-0.3.9-py3-none-any.whl (119 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m119.4/119.4 kB\u001b[0m \u001b[31m7.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading ipylab-1.0.0-py3-none-any.whl (100 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m100.2/100.2 kB\u001b[0m \u001b[31m6.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading jupytext-1.16.4-py3-none-any.whl (153 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m153.5/153.5 kB\u001b[0m \u001b[31m10.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading python_on_whales-0.73.0-py3-none-any.whl (118 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m118.1/118.1 kB\u001b[0m \u001b[31m7.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hUsing cached jedi-0.19.1-py2.py3-none-any.whl (1.6 MB)\n","Installing collected packages: jedi, dill, fica, python-on-whales, jupytext, ipylab, otter-grader\n","Successfully installed dill-0.3.9 fica-0.4.1 ipylab-1.0.0 jedi-0.19.1 jupytext-1.16.4 otter-grader-5.7.1 python-on-whales-0.73.0\n","--2024-10-11 18:49:20--  https://github.com/dsc207rfall2023/fa23course-dsc207r/raw/main/assignments/Week%202/tests.zip\n","Resolving github.com (github.com)... 140.82.112.4\n","Connecting to github.com (github.com)|140.82.112.4|:443... connected.\n","HTTP request sent, awaiting response... 302 Found\n","Location: https://raw.githubusercontent.com/dsc207rfall2023/fa23course-dsc207r/main/assignments/Week%202/tests.zip [following]\n","--2024-10-11 18:49:20--  https://raw.githubusercontent.com/dsc207rfall2023/fa23course-dsc207r/main/assignments/Week%202/tests.zip\n","Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n","Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 3518 (3.4K) [application/zip]\n","Saving to: ‘tests.zip’\n","\n","tests.zip           100%[===================>]   3.44K  --.-KB/s    in 0s      \n","\n","2024-10-11 18:49:20 (39.4 MB/s) - ‘tests.zip’ saved [3518/3518]\n","\n","Archive:  tests.zip\n","   creating: tests/\n","  inflating: tests/q5.py             \n","  inflating: tests/q1.py             \n","  inflating: tests/q4.py             \n","  inflating: tests/q8.py             \n","  inflating: tests/q3.py             \n","  inflating: tests/q7.py             \n","  inflating: tests/q6.py             \n","  inflating: tests/q2.py             \n"]}],"source":["# DO NOT MODIFY\n","%pip install otter-grader\n","\n","tests = \"https://github.com/dsc207rfall2023/fa23course-dsc207r/raw/main/assignments/Week%202/tests.zip\"\n","!wget $tests && unzip -o tests.zip"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"8lNL2u_svAQQ","executionInfo":{"status":"ok","timestamp":1728672563354,"user_tz":420,"elapsed":855,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}}},"outputs":[],"source":["# Initialize Otter\n","import otter\n","grader = otter.Notebook()"]},{"cell_type":"code","execution_count":3,"metadata":{"deletable":false,"editable":false,"id":"5Dhh0vpTvAQQ","executionInfo":{"status":"ok","timestamp":1728672563355,"user_tz":420,"elapsed":5,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}}},"outputs":[],"source":["# LOAD LIBRARIES\n","import numpy as np"]},{"cell_type":"markdown","metadata":{"deletable":false,"editable":false,"id":"NFhqf_KQKxzv"},"source":["### 1. Random array\n","\n","Generate an integer random numpy array, `a`, of shape (3,5) with elements from 5 to 26 (inclusive). (Hint: Look at the documentation of `numpy.random.randint`) [1 pt]\n","\n","For eg.\n","\n","    a = array([[26,  9, 24,  7, 15],\n","              [17, 15, 21, 18, 24],\n","              [ 5, 15, 10, 15, 13]])"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"Cjg3iFUKKxzv","tags":[],"executionInfo":{"status":"ok","timestamp":1728672563355,"user_tz":420,"elapsed":5,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}}},"outputs":[],"source":["a = np.random.randint(5, 27, size = (3,5))"]},{"cell_type":"code","execution_count":5,"metadata":{"deletable":false,"editable":false,"id":"6Rdik0YsvAQQ","executionInfo":{"status":"ok","timestamp":1728672563355,"user_tz":420,"elapsed":5,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}}},"outputs":[],"source":["# Sanity checks\n","assert a.shape == (3, 5)\n","assert np.max(a) <= 26"]},{"cell_type":"code","source":["grader.check('q1')"],"metadata":{"id":"AZufGgKwBeKX","colab":{"base_uri":"https://localhost:8080/","height":46},"executionInfo":{"status":"ok","timestamp":1728672563355,"user_tz":420,"elapsed":4,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}},"outputId":"ebc4a8b0-51e8-4f7f-c100-5c6478fbe095"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["q1 results: All test cases passed!"],"text/html":["<p><strong><pre style='display: inline;'>q1</pre></strong> passed! 🙌</p>"]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","metadata":{"deletable":false,"editable":false,"id":"Wnikr27AvAQR"},"source":["### 2. Transpose and inverse of the array\n","\n","1. The transpose of an array is created by using the first row of the array as the first column of the new array, the second row of the array as the second column of the new array, and so on. **Create transpose of array `a` using numpy.** Note - you should not write your own transpose function for this step. [0.5 pt]\n","\n","For eg. The transpose of\n","\n","    a = array([[26,  9, 24,  7, 15],\n","              [17, 15, 21, 18, 24],\n","              [ 5, 15, 10, 15, 13]])\n","\n","    aT = array([[26, 17,  5],\n","                [ 9, 15, 15],\n","                [24, 21, 10],\n","                [ 7, 18, 15],\n","               [15, 24, 13]])\n","\n","2. Like numbers, matrices do have reciprocals. In case of matrices, this reciprocal is called inverse matrix. If A is a square matrix and B is its inverse, then the product of two matrices is equal to the unit matrix. **Create the inverse of B using numpy.** (Hint: look up documentation for linalg library in numpy) [0.5 pt]\n","\n","Initialize an integer numpy array `B`, of shape (2,2) as shown below.\n","      \n","      B=array([[10,  6],\n","              [ 5,  5]])\n","       "]},{"cell_type":"code","execution_count":7,"metadata":{"tags":[],"id":"qkcXy9wyvAQR","executionInfo":{"status":"ok","timestamp":1728672563355,"user_tz":420,"elapsed":4,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}}},"outputs":[],"source":["a = np.array([[17, 20, 13, 23, 26],\n","              [21, 12,  9, 15,  6],\n","              [16, 23, 14, 25, 20]])\n","\n","aT = np.transpose(a)\n","B = np.array([[10,6],[5,5]])\n","B_inv = np.linalg.inv(B)"]},{"cell_type":"code","execution_count":8,"metadata":{"deletable":false,"editable":false,"id":"lFfPjq9cvAQR","executionInfo":{"status":"ok","timestamp":1728672563883,"user_tz":420,"elapsed":532,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}}},"outputs":[],"source":["# Sanity checks\n","assert aT.shape == (5, 3)\n","assert np.min(aT) >= 5\n","assert np.linalg.det(B_inv) != 0"]},{"cell_type":"code","source":["grader.check('q2')"],"metadata":{"id":"XT9SHk76Bgdu","colab":{"base_uri":"https://localhost:8080/","height":46},"executionInfo":{"status":"ok","timestamp":1728672563883,"user_tz":420,"elapsed":13,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}},"outputId":"d7ac70fe-6286-4931-d4d8-ee8cfa41a678"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["q2 results: All test cases passed!"],"text/html":["<p><strong><pre style='display: inline;'>q2</pre></strong> passed! 🎉</p>"]},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","metadata":{"deletable":false,"editable":false,"id":"KGuEtCKRvAQR"},"source":["### 3. Array slicing\n","1. Slicing in python means taking elements from one given index to another given index. **Retrieve elements from last 2 rows and last 2 columns of array `a` and store the result in `c`** [0.5 pt]\n","\n","For eg. for the above array A - the last 2 columns and last 2 rows are\n","\n","    array([[18, 24],\n","            [15, 13]])\n","\n","2. Retrieve the 2nd and 3rd rows of array `a` and store the result in `d`.  [0.5 pt]\n","\n","For eg. for the above array A, the 2nd and 3rd rows are\n","\n","      array([[17, 15, 21, 18, 24],\n","            [ 5, 15, 10, 15, 13]])"]},{"cell_type":"code","execution_count":10,"metadata":{"tags":[],"id":"x4F7oicQvAQR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728672563883,"user_tz":420,"elapsed":12,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}},"outputId":"c2732e0f-280b-4fc7-a73a-a409190d38fa"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[21 12  9 15  6]\n"," [16 23 14 25 20]]\n"]}],"source":["\n","c = a[-2:, -2:]\n","d = a[1:, :]\n","print(d)"]},{"cell_type":"code","execution_count":11,"metadata":{"deletable":false,"editable":false,"id":"Cp-SCv7VvAQR","executionInfo":{"status":"ok","timestamp":1728672563883,"user_tz":420,"elapsed":11,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}}},"outputs":[],"source":["# Checks\n","assert c.shape == (2, 2)\n","assert d.shape == (2, 5)"]},{"cell_type":"code","source":["grader.check('q3')"],"metadata":{"id":"cyIq_NB-BjJ_","colab":{"base_uri":"https://localhost:8080/","height":46},"executionInfo":{"status":"ok","timestamp":1728672563883,"user_tz":420,"elapsed":11,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}},"outputId":"0321694d-c4d8-4139-f75e-8d065ce0a4e1"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["q3 results: All test cases passed!"],"text/html":["<p><strong><pre style='display: inline;'>q3</pre></strong> passed! 🎉</p>"]},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","metadata":{"deletable":false,"editable":false,"id":"yF9IObMHvAQR"},"source":["### 4. Broadcasting\n","\n","1. Broadcasting describes how NumPy treats arrays with different shapes during arithmetic operations. Subject to certain constraints, the smaller array is “broadcast” across the larger array so that they have compatible shapes. Below you can see the difference between vector addition for traditional lists and numpy arrays.\n","\n","\n"]},{"cell_type":"code","execution_count":13,"metadata":{"deletable":false,"editable":false,"id":"xoEXeKRjvAQS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728672563883,"user_tz":420,"elapsed":11,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}},"outputId":"e0d7217f-b2a2-4996-fda1-dbd50291910f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[[28, 13, 30, 15, 25], [19, 19, 27, 26, 34], [7, 19, 16, 23, 23]]"]},"metadata":{},"execution_count":13}],"source":["# If we were not using numpy arrays, we would have to loop through the array. Run this cell.\n","arr= [[27, 11, 27, 11, 20],\n","       [18, 17, 24, 22, 29],\n","       [ 6, 17, 13, 19, 18]]\n","c = [1,2,3,4,5]\n","for row in range(len(arr)):\n","  for col in range(len(arr[0])):\n","    arr[row][col] = arr[row][col]+c[col]\n","arr"]},{"cell_type":"markdown","metadata":{"deletable":false,"editable":false,"id":"lwlcY12NvAQS"},"source":["\n","**Create a vector `c=[1,2,3,4,5]`. Add this vector to array `a` using numpy broadcasting. Store the result in `x`.**  [0.5 pt]\n","\n","For eg. for the array A - the result array would be\n","\n","    array([[27, 11, 27, 11, 20],\n","          [18, 17, 24, 22, 29],\n","          [ 6, 17, 13, 19, 18]])\n","\n","2. **(True / False) It is possible to add array B from Question 2 to a. Explain your reasons for the answer.**  [0.5 pt]"]},{"cell_type":"code","execution_count":14,"metadata":{"tags":[],"id":"ZtNwpx7IvAQS","executionInfo":{"status":"ok","timestamp":1728672563883,"user_tz":420,"elapsed":10,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}}},"outputs":[],"source":["\n","c = c = np.array([1,2,3,4,5])\n","x = a + c\n","\n","answer = False #True or False\n","# Write explanation below\n","# False, because none of their dimensions are the same."]},{"cell_type":"code","execution_count":15,"metadata":{"deletable":false,"editable":false,"id":"vjup07BSvAQS","executionInfo":{"status":"ok","timestamp":1728672563884,"user_tz":420,"elapsed":11,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}}},"outputs":[],"source":["# Checks\n","assert x.shape == (3, 5)\n","\n","assert np.array_equal(x, a) == False"]},{"cell_type":"code","source":["grader.check('q4')"],"metadata":{"id":"lOTNZineBrVW","colab":{"base_uri":"https://localhost:8080/","height":46},"executionInfo":{"status":"ok","timestamp":1728672563884,"user_tz":420,"elapsed":11,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}},"outputId":"0fc42262-0a41-4a42-eb57-597aebd52b70"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["q4 results: All test cases passed!"],"text/html":["<p><strong><pre style='display: inline;'>q4</pre></strong> passed! 🙌</p>"]},"metadata":{},"execution_count":16}]},{"cell_type":"markdown","metadata":{"deletable":false,"editable":false,"id":"JiZDM4B6vAQS"},"source":["### 5. Reshaping\n","\n","**Create a list `B=[1,2,3]` and add it to all the columns of `a`. Store the resulting array in z** (Hint: Use reshape and broadcasting)  [1 pt]\n","\n","For eg. for the modified array A, the result would be\n","\n","    array([[27, 10, 25,  8, 16],\n","          [19, 17, 23, 20, 26],\n","          [ 8, 18, 13, 18, 16]])"]},{"cell_type":"code","execution_count":17,"metadata":{"tags":[],"id":"gRxOHlyAvAQS","executionInfo":{"status":"ok","timestamp":1728672563884,"user_tz":420,"elapsed":10,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}}},"outputs":[],"source":["B = np.reshape([1,2,3], (3,1))\n","z = a + B"]},{"cell_type":"code","execution_count":18,"metadata":{"deletable":false,"editable":false,"id":"lu-8a4lwvAQS","executionInfo":{"status":"ok","timestamp":1728672563884,"user_tz":420,"elapsed":10,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}}},"outputs":[],"source":["assert z.shape == (3, 5)\n","\n","assert np.array_equal(z, a) == False"]},{"cell_type":"code","source":["grader.check('q5')"],"metadata":{"id":"zMXaHY3MBsUQ","colab":{"base_uri":"https://localhost:8080/","height":46},"executionInfo":{"status":"ok","timestamp":1728672563884,"user_tz":420,"elapsed":10,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}},"outputId":"50849317-748b-4286-d1a8-42f45839cdc7"},"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["q5 results: All test cases passed!"],"text/html":["<p><strong><pre style='display: inline;'>q5</pre></strong> passed! ✨</p>"]},"metadata":{},"execution_count":19}]},{"cell_type":"markdown","metadata":{"deletable":false,"editable":false,"id":"MbFexBWYvAQS"},"source":["### 6. Data analysis using numpy\n","\n","**Normalization: Create a new array where each element in `a` is adjusted by subtracting the mean of its corresponding row. Store this new array in a_norm.** (Hint: look at numpy's mean method and it's arguments) [2 pt]\n","\n","For eg. for the modified array A, the expected output would be\n","\n","    array([[ 9.8, -7.2,  7.8, -9.2, -1.2],\n","          [-2. , -4. ,  2. , -1. ,  5. ],\n","          [-6.6,  3.4, -1.6,  3.4,  1.4]])"]},{"cell_type":"code","execution_count":20,"metadata":{"tags":[],"id":"HFb7Ss-XvAQS","executionInfo":{"status":"ok","timestamp":1728672563884,"user_tz":420,"elapsed":10,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}}},"outputs":[],"source":["a_norm = a - np.mean(a, axis=1).reshape(3,1)"]},{"cell_type":"code","execution_count":21,"metadata":{"deletable":false,"editable":false,"id":"kb2MLyTVvAQS","executionInfo":{"status":"ok","timestamp":1728672563884,"user_tz":420,"elapsed":9,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}}},"outputs":[],"source":["assert a_norm.shape == (3, 5)"]},{"cell_type":"code","source":["grader.check('q6')"],"metadata":{"id":"GDkV2evzBuJB","colab":{"base_uri":"https://localhost:8080/","height":46},"executionInfo":{"status":"ok","timestamp":1728672563884,"user_tz":420,"elapsed":9,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}},"outputId":"a7f129a2-07db-4b5c-b62a-fda1aecef632"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["q6 results: All test cases passed!"],"text/html":["<p><strong><pre style='display: inline;'>q6</pre></strong> passed! 🙌</p>"]},"metadata":{},"execution_count":22}]},{"cell_type":"markdown","metadata":{"deletable":false,"editable":false,"id":"pW5ojO9FvAQS"},"source":["### 7. Data manipulation in numpy arrays.\n","\n","**Swap first and second row of array `a`. Store the new array in X.** [0.5 pt]\n","\n","For eg. for the modified array `a` the expected output would be\n","\n","    array([[17, 15, 21, 18, 24],\n","           [26,  9, 24,  7, 15],\n","           [ 5, 15, 10, 15, 13]])\n","\n","**Swap second and third row of array `X`. Store the new array in `Y`.**  [0.5 pt]\n","\n","For eg. for the modified array `a` the expected output would be\n","   \n","    array([[17, 15, 21, 18, 24],\n","           [ 5, 15, 10, 15, 13],\n","           [26,  9, 24,  7, 15]])"]},{"cell_type":"code","execution_count":23,"metadata":{"tags":[],"id":"WLoA97JZvAQT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728672563884,"user_tz":420,"elapsed":9,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}},"outputId":"da370db0-b487-48c7-a14c-0fb37fa6d673"},"outputs":[{"output_type":"stream","name":"stdout","text":["(3, 5)\n"]}],"source":["print(a.shape)\n","X = a[[1,0,2]]\n","Y = X[[0,2,1]]"]},{"cell_type":"code","execution_count":24,"metadata":{"deletable":false,"editable":false,"id":"PehQQmoJvAQT","executionInfo":{"status":"ok","timestamp":1728672563884,"user_tz":420,"elapsed":8,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}}},"outputs":[],"source":["assert X.shape == (3, 5)\n","\n","assert Y.shape == (3, 5)"]},{"cell_type":"code","source":["grader.check('q7')"],"metadata":{"id":"yGqpH4ErBvV9","colab":{"base_uri":"https://localhost:8080/","height":46},"executionInfo":{"status":"ok","timestamp":1728672563884,"user_tz":420,"elapsed":8,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}},"outputId":"51505899-8da9-4e76-8676-b4ab553c4ce8"},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["q7 results: All test cases passed!"],"text/html":["<p><strong><pre style='display: inline;'>q7</pre></strong> passed! 🍀</p>"]},"metadata":{},"execution_count":25}]},{"cell_type":"markdown","metadata":{"id":"6E94EpEhvAQT"},"source":["### 8. The Power Of Numpy"]},{"cell_type":"code","execution_count":26,"metadata":{"id":"xgHEmp-KvAQT","executionInfo":{"status":"ok","timestamp":1728672563884,"user_tz":420,"elapsed":7,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}}},"outputs":[],"source":["#Run this cell\n","import time\n","\n","twoD_list = [[i for i in range(500)] for j in range(500)]\n","\n","# This a traditional matrix multiplication using for loops\n","def matrix_multiplication(x, y):\n","    dp = 0\n","    prod=[]\n","    for i in range(len(x)):\n","      row=[]\n","      for j in range(len(x[0])):\n","        mul=0\n","        for k in range(len(x[0])):\n","          mul += (x[i][k]*y[k][j])\n","        row.append(mul)\n","      prod.append(row)\n","\n","    return prod"]},{"cell_type":"code","execution_count":27,"metadata":{"id":"N0W_7IBJvAQT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728672597687,"user_tz":420,"elapsed":33810,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}},"outputId":"87d89a2b-1af8-48b6-8ca1-73ad76b715c6"},"outputs":[{"output_type":"stream","name":"stdout","text":["33.610095500946045\n"]}],"source":["# Run this cell. Note the time taken to perform traditional matrix multiplication using lists.\n","start_time = time.time()\n","dot_product_list = matrix_multiplication(twoD_list, twoD_list)\n","end_time = time.time()\n","print(end_time-start_time)"]},{"cell_type":"markdown","metadata":{"deletable":false,"editable":false,"id":"NRpzIYpEvAQT"},"source":["**Convert the `twoD_list` to a numpy array `numpy_twoD_array`. Print the numpy array**\n","\n","For eg.\n","\n","    numpy_twoD = array([[  0,   1,   2, ..., 497, 498, 499],\n","                        [  0,   1,   2, ..., 497, 498, 499],\n","                        [  0,   1,   2, ..., 497, 498, 499],\n","                         ...,\n","                        [  0,   1,   2, ..., 497, 498, 499],\n","                        [  0,   1,   2, ..., 497, 498, 499],\n","                        [  0,   1,   2, ..., 497, 498, 499]])\n","\n","**Perform matrix multiplication of the numpy array i.e. numpy_twoD_array * numpy_twoD_array. Record the result in dot_product_array and report the time taken for the operation similar to traditional list multiplication.**  [2 pt]"]},{"cell_type":"code","execution_count":28,"metadata":{"tags":[],"id":"Wb7uARyNvAQT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728672597687,"user_tz":420,"elapsed":8,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}},"outputId":"3e740a79-dc95-4545-a184-078c5db4603d"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[  0   1   2 ... 497 498 499]\n"," [  0   1   2 ... 497 498 499]\n"," [  0   1   2 ... 497 498 499]\n"," ...\n"," [  0   1   2 ... 497 498 499]\n"," [  0   1   2 ... 497 498 499]\n"," [  0   1   2 ... 497 498 499]]\n"]}],"source":["start_time=time.time();\n","\n","numpy_twoD_array = np.array(twoD_list)\n","print(numpy_twoD_array)\n","dot_product_array = np.matmul(numpy_twoD_array, numpy_twoD_array)\n"]},{"cell_type":"code","execution_count":29,"metadata":{"deletable":false,"editable":false,"id":"8F5S2mUavAQT","executionInfo":{"status":"ok","timestamp":1728672597687,"user_tz":420,"elapsed":6,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}}},"outputs":[],"source":["assert dot_product_array.shape == (500, 500)"]},{"cell_type":"code","source":["grader.check('q8')"],"metadata":{"id":"TsAiLu6DEvUU","colab":{"base_uri":"https://localhost:8080/","height":46},"executionInfo":{"status":"ok","timestamp":1728672597687,"user_tz":420,"elapsed":6,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}},"outputId":"35239741-aa6a-415d-efe6-338ca414125b"},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["q8 results: All test cases passed!"],"text/html":["<p><strong><pre style='display: inline;'>q8</pre></strong> passed! 🍀</p>"]},"metadata":{},"execution_count":30}]},{"cell_type":"markdown","source":["### 9. Password Encoding Challenge\n"],"metadata":{"id":"03ACW3BWqck6"}},{"cell_type":"markdown","source":["#### Part A: 2.5 pts\n","\n","You are a cybersecurity expert tasked with encoding a password protected system. Your mission is to write a Python script using NumPy to generate the password. Follow these steps:\n","\n","1. Set the random seed using the last 3 digits of your phone number, or any three numbers of your choice. Since random number generators aren't truly random, we use a seed to initialize the pseudorandom number generator.\n","Some more information about the random number generator seeds: https://stackoverflow.com/questions/21494489/what-does-numpy-random-seed0-do\n","2. Generate a list of 12 random integers between 1 and 1000 using NumPy.\n","3. Reshape this list into a shape (nxm) of your choice (other then what it already is) (n !=1, m!=1).\n","4. Perform three operations of your choice using NumPy functions on this reshaped (nxm) array. Some examples are:\n","  - np.add() [Adds 2 arrays (you can generate another array randomly and add)]\n","  - np.matmul() [Carries out matrix multiplication of 2 matrices]\n","  - np.sin() [Returns the sine of each element of nxm matrix]\n","  - np.transpose() [Returns the transpose of the input matrix]\n","5. Your final output should be a 1D array of 12 integers, which will serve as the password. (You can check the shape using the numpy.shape function. Both (12,1) and (12,) are acceptable.)\n","\n","Requirements:\n","- Use NumPy for all operations.\n","- Comment your code to explain your thought process.\n","- The final password must be different from the initial random list.\n","\n","Rubric for Code Submission\n","1. Correctly setting the seed. (0.25 pt)\n","2. Successful generation of 12 random numbers between 0 and 1000 using numpy. (0.5 pt)\n","3. Reshaping of the 1D array to an (nxm) array. (0.5 pt)\n","4. Utilizing 3 distinct numpy operations to modify the generated array and obtain a password. (0.5 pt)\n","5. Successfully reshaping the nxm modified array back to a 1D array of 12 **integers**. (0.5 pt)\n","6. Code runs without any errors (0.25 pt)"],"metadata":{"id":"VWLZUbc2dUjI"}},{"cell_type":"code","source":["np.random.seed(375)\n","rand_list = np.array(np.random.rand(1, 12) * 1000)\n","rand_list_2 = np.array(np.random.rand(1, 12) * 1000).reshape(3,4)\n","shaped_list = rand_list.reshape(3,4)\n","sin_list = np.sin(shaped_list)\n","added_list = np.add(sin_list, rand_list_2)\n","transposed_list = np.transpose(added_list)\n","og_shaped_list = transposed_list.reshape(12,1)"],"metadata":{"id":"3riO-7aqd881","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728673006569,"user_tz":420,"elapsed":249,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}},"outputId":"0ab3806b-4240-4645-f676-490af0a79999"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["[[203.17542432  82.18955644  53.70119167 465.65111753 211.60239142\n","  528.62910545 941.91238466 293.47363497  13.47997241 519.79903838\n","  903.69533587 798.45454887]]\n","[[759.29623297  62.56063512 324.8561254  116.51258826]\n"," [  8.74797121 471.16233298 126.78996815 636.28629795]\n"," [393.950716   850.87918142 623.57477847 969.34269316]]\n","(12, 1)\n","[[760.15255131]\n"," [  7.84975972]\n"," [394.7424252 ]\n"," [ 63.04719472]\n"," [471.90800287]\n"," [849.88821906]\n"," [324.56623094]\n"," [126.2542049 ]\n"," [622.69124743]\n"," [117.15328455]\n"," [635.32127834]\n"," [969.81333216]]\n"]}]},{"cell_type":"markdown","source":["#### Part B: 2.5 pts\n","\n","Submit a 2-3 minute video explaining your approach and demonstrating your understanding of the NumPy concepts used.\n","\n","Rubric for Video Submission:\n","1. Demonstration of understanding NumPy random number generation (0.5 pt)\n","2. Explanation of reshaping logic (1 pt)\n","3. Discussion of chosen NumPy operations and their effects (1 pt)"],"metadata":{"id":"3-ZCi4xtdrlI"}},{"cell_type":"markdown","source":["Upload the recorded video to your drive and paste the shareable link in the cell below.\n","\n","Note: Ensure that we are able to view the video."],"metadata":{"id":"Zc5RBV8neDYD"}},{"cell_type":"code","source":["# https://drive.google.com/file/d/1TFh0dAByzMLLyBlGu5xjoR1FZjHG47id/view?usp=sharing"],"metadata":{"id":"UKmZl1Jgd-DG","executionInfo":{"status":"ok","timestamp":1728672597687,"user_tz":420,"elapsed":4,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}}},"execution_count":32,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JyUYZDnZvAQT"},"source":["### Submission\n","\n","Before you submit your notebook, ensure that you've run all the cells sequentially to display images, graphs, and outputs correctly. Take the time to review your solutions and evaluate using the public test cases. Once you're satisfied, save your notebook by navigating to \"File\" in the Colab Notebook menu and selecting \"Save\" or using the keyboard shortcut (usually Ctrl + S or Cmd + S).\n","\n","To submit, export your notebook as an .ipynb file. Ensure it's saved with the same name as the assignment. Then, upload this .ipynb file to Gradescope. Remember to submit the correct version.\n","\n","Please save your work before exporting it, and if you encounter any technical issues or have questions about the submission process, reach out to the course staff for assistance"]},{"cell_type":"markdown","source":["---\n","\n","To double-check your work for the autograded portions, the cell below will rerun all of the autograder tests."],"metadata":{"id":"WBKBLLVoEyQV"}},{"cell_type":"code","source":["grader.check_all()"],"metadata":{"id":"a41o2jZpEx_m","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728672597688,"user_tz":420,"elapsed":5,"user":{"displayName":"Danny Xia","userId":"01552212650679816750"}},"outputId":"ad1d129d-8c38-48f6-92ab-b5abb8f178db"},"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["q1 results: All test cases passed!\n","\n","q2 results: All test cases passed!\n","\n","q3 results: All test cases passed!\n","\n","q4 results: All test cases passed!\n","\n","q5 results: All test cases passed!\n","\n","q6 results: All test cases passed!\n","\n","q7 results: All test cases passed!\n","\n","q8 results: All test cases passed!"]},"metadata":{},"execution_count":33}]}],"metadata":{"colab":{"provenance":[{"file_id":"1LtGhWRYKWpun_QSbldP-1QclRKtQOlFZ","timestamp":1728346089441}]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.5"},"otter":{"OK_FORMAT":true,"tests":{"q1":{"name":"q1","points":1,"suites":[{"cases":[],"scored":true,"setup":"","teardown":"","type":"doctest"}]},"q2":{"name":"q2","points":1,"suites":[{"cases":[],"scored":true,"setup":"","teardown":"","type":"doctest"}]},"q3":{"name":"q3","points":1,"suites":[{"cases":[],"scored":true,"setup":"","teardown":"","type":"doctest"}]},"q4":{"name":"q4","points":1,"suites":[{"cases":[],"scored":true,"setup":"","teardown":"","type":"doctest"}]},"q5":{"name":"q5","points":1,"suites":[{"cases":[],"scored":true,"setup":"","teardown":"","type":"doctest"}]},"q6":{"name":"q6","points":2,"suites":[{"cases":[],"scored":true,"setup":"","teardown":"","type":"doctest"}]},"q7":{"name":"q7","points":1,"suites":[{"cases":[],"scored":true,"setup":"","teardown":"","type":"doctest"}]},"q8":{"name":"q8","points":2,"suites":[{"cases":[],"scored":true,"setup":"","teardown":"","type":"doctest"}]}}}},"nbformat":4,"nbformat_minor":0}